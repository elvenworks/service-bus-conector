// Code generated by mockery v1.0.0. DO NOT EDIT.

package azuremocks

import azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ServicBusClient is an autogenerated mock type for the ServicBusClient type
type ServicBusClient struct {
	mock.Mock
}

// AcceptNextSessionForQueue provides a mock function with given fields: ctx, queueName, options
func (_m *ServicBusClient) AcceptNextSessionForQueue(ctx context.Context, queueName string, options *azservicebus.SessionReceiverOptions) (*azservicebus.SessionReceiver, error) {
	ret := _m.Called(ctx, queueName, options)

	var r0 *azservicebus.SessionReceiver
	if rf, ok := ret.Get(0).(func(context.Context, string, *azservicebus.SessionReceiverOptions) *azservicebus.SessionReceiver); ok {
		r0 = rf(ctx, queueName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.SessionReceiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *azservicebus.SessionReceiverOptions) error); ok {
		r1 = rf(ctx, queueName, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptNextSessionForSubscription provides a mock function with given fields: ctx, topicName, subscriptionName, options
func (_m *ServicBusClient) AcceptNextSessionForSubscription(ctx context.Context, topicName string, subscriptionName string, options *azservicebus.SessionReceiverOptions) (*azservicebus.SessionReceiver, error) {
	ret := _m.Called(ctx, topicName, subscriptionName, options)

	var r0 *azservicebus.SessionReceiver
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azservicebus.SessionReceiverOptions) *azservicebus.SessionReceiver); ok {
		r0 = rf(ctx, topicName, subscriptionName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.SessionReceiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *azservicebus.SessionReceiverOptions) error); ok {
		r1 = rf(ctx, topicName, subscriptionName, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptSessionForQueue provides a mock function with given fields: ctx, queueName, sessionID, options
func (_m *ServicBusClient) AcceptSessionForQueue(ctx context.Context, queueName string, sessionID string, options *azservicebus.SessionReceiverOptions) (*azservicebus.SessionReceiver, error) {
	ret := _m.Called(ctx, queueName, sessionID, options)

	var r0 *azservicebus.SessionReceiver
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azservicebus.SessionReceiverOptions) *azservicebus.SessionReceiver); ok {
		r0 = rf(ctx, queueName, sessionID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.SessionReceiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *azservicebus.SessionReceiverOptions) error); ok {
		r1 = rf(ctx, queueName, sessionID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptSessionForSubscription provides a mock function with given fields: ctx, topicName, subscriptionName, sessionID, options
func (_m *ServicBusClient) AcceptSessionForSubscription(ctx context.Context, topicName string, subscriptionName string, sessionID string, options *azservicebus.SessionReceiverOptions) (*azservicebus.SessionReceiver, error) {
	ret := _m.Called(ctx, topicName, subscriptionName, sessionID, options)

	var r0 *azservicebus.SessionReceiver
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *azservicebus.SessionReceiverOptions) *azservicebus.SessionReceiver); ok {
		r0 = rf(ctx, topicName, subscriptionName, sessionID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.SessionReceiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *azservicebus.SessionReceiverOptions) error); ok {
		r1 = rf(ctx, topicName, subscriptionName, sessionID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: ctx
func (_m *ServicBusClient) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReceiverForQueue provides a mock function with given fields: queueName, options
func (_m *ServicBusClient) NewReceiverForQueue(queueName string, options *azservicebus.ReceiverOptions) (*azservicebus.Receiver, error) {
	ret := _m.Called(queueName, options)

	var r0 *azservicebus.Receiver
	if rf, ok := ret.Get(0).(func(string, *azservicebus.ReceiverOptions) *azservicebus.Receiver); ok {
		r0 = rf(queueName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *azservicebus.ReceiverOptions) error); ok {
		r1 = rf(queueName, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceiverForSubscription provides a mock function with given fields: topicName, subscriptionName, options
func (_m *ServicBusClient) NewReceiverForSubscription(topicName string, subscriptionName string, options *azservicebus.ReceiverOptions) (*azservicebus.Receiver, error) {
	ret := _m.Called(topicName, subscriptionName, options)

	var r0 *azservicebus.Receiver
	if rf, ok := ret.Get(0).(func(string, string, *azservicebus.ReceiverOptions) *azservicebus.Receiver); ok {
		r0 = rf(topicName, subscriptionName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *azservicebus.ReceiverOptions) error); ok {
		r1 = rf(topicName, subscriptionName, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSender provides a mock function with given fields: queueOrTopic, options
func (_m *ServicBusClient) NewSender(queueOrTopic string, options *azservicebus.NewSenderOptions) (*azservicebus.Sender, error) {
	ret := _m.Called(queueOrTopic, options)

	var r0 *azservicebus.Sender
	if rf, ok := ret.Get(0).(func(string, *azservicebus.NewSenderOptions) *azservicebus.Sender); ok {
		r0 = rf(queueOrTopic, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azservicebus.Sender)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *azservicebus.NewSenderOptions) error); ok {
		r1 = rf(queueOrTopic, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
